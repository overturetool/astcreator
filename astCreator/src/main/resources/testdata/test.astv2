Tokens
/* This section declared tokens as internal types or external classes
 * internal definitions:
 *  plus='+';
 *
 * external
 *  location = 'java:org.overturetool.vdmj.lex.LexLocation';
 */
  lextoken = 'java:org.overturetool.vdmj.lex.LexToken';
  location = 'java:org.overturetool.vdmj.lex.LexLocation';
//  LexToken1 = 'java:node:org.overturetool.vdmj.lex.LexToken';
  tok = 'java:enum:org.overturetool.vdmj.lex.KK';
  plus = '+';
  int = 'int';
  real = 'real';
  bool = 'bool';
  true = 'true';
  false = 'false';
  and_and = '&&';
  or_or = '||';
  numbers_literal = 'some regex for numbers';
   minus='_'; 

Abstract Syntax Tree
/* This section declares the AST by giving root nodes and their possible sub classes
 *
 * exp {-> package='org.overture.ast.expressions'}
 *      = {subclass1} [field_name]:field_type_must_either_be_root_or_token ...
 *      ;
 *
 */

binop {-> package='org.overture.ast.expressions'}
    =   {plus} [token]:location //[token]:plus
    //|   {minus} [token]:minus
    |   {lazy_and} [token]:and_and
    |   {lazy_or} [token]:or_or
    ;
    
unop
    =   {negate} [token]:minus
    ;
    
exp {-> package='org.overture.ast.expressions'}
    =   {binop} [left]:exp binop [right]:exp
//    |   {and} [left]:exp binop [right]:exp
    |   {unop} unop exp
    |   {int_const} numbers_literal
    |   {boolean_const} boolean
    |   {apply} [root]:exp [args]:exp*
    |   {testexpp} [tt]:tok
    |   {kenneth} [ff]:exp** (graf):exp (glist):exp* (glistlist):exp** 
    | #dd
    ;
#dd
 = {gg}
| #kk
 ;
 
 #kk
 ={sub2}
 ;
    
boolean
    =   {true}
    |   {false}
    ;
    
type
    =   {real} [token]:real
    |   {int} [token]:int
    |   {bool} [token]:bool
    ;

Aspect Declaration
/* This section allows fields of root types to be declared e.g. exp*/
%exp = [type]:type* [tokenLL]:location
    ;
    
%exp->#dd = [kkkk]:type;

%exp->#dd->#kk = [lll]:type;