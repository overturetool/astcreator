Packages
base org.overture.ast.node;
analysis org.overture.ast.analysis;

Tokens
  LexToken = 'java:node:org.overture.ast.lex.LexToken';
  LexNameToken = 'java:node:org.overture.ast.lex.LexNameToken';
  LexIdentifierToken = 'java:node:org.overture.ast.lex.LexIdentifierToken';
  LexBooleanToken = 'java:node:org.overture.ast.lex.LexBooleanToken';
  LexCharacterToken = 'java:node:org.overture.ast.lex.LexCharacterToken';
  LexIntegerToken = 'java:node:org.overture.ast.lex.LexIntegerToken';
  LexQuoteToken = 'java:node:org.overture.ast.lex.LexQuoteToken';
  LexRealToken = 'java:node:org.overture.ast.lex.LexRealToken';
  LexStringToken = 'java:node:org.overture.ast.lex.LexStringToken';
  location = 'java:org.overture.ast.lex.LexLocation';
  
  clonableFile ='java:org.overture.ast.util.ClonableFile';
  clonableString ='java:org.overture.ast.util.ClonableString';
  
  ClassDefinitionSettings = 'java:enum:org.overture.ast.typechecker.ClassDefinitionSettings';
  nameScope = 'java:enum:org.overture.ast.typechecker.NameScope';
  Pass = 'java:enum:org.overture.ast.typechecker.Pass'; 
  
  //Java
  java_Boolean = 'java:java.lang.Boolean';
  java_Integer = 'java:java.lang.Integer';
  java_String = 'java:java.lang.String';
  java_Long = 'java:java.lang.Long';
  java_File  = 'java:java.io.File';
  java_Stream = 'java:java.io.InputStream';
     
  static = 'static';
  async = 'async';



Abstract Syntax Tree

exp {-> package='org.overture.ast.expressions'}
    = #Binary 
 	; 

#Binary {-> package='org.overture.ast.expressions'}
    =   #Boolean
    |   {comp} 
    |   {domainResBy}
    |   {domainResTo}
    |   {equals} [name]: java_String 
    |   {inSet}
    |   {mapUnion}
    |   {notEqual}
    |   {notInSet}
    |   #Numeric
    |   {plusPlus}
    |   {properSubset}
    |   {rangeResBy}
    |   {rangeResTo}
    |   {seqConcat}
    |   {setDifference}
    |   {setIntersect}
    |   {setUnion}
    |   {starStar}
    |   {subset}
    ;


type {-> package='org.overture.ast.types'}
    =   #basic
    ;
    
#basic {-> package='org.overture.ast.types'}
    =   {boolean}
    |   {char}
    |   #numeric     
    |   {token}
    ;

Aspect Declaration	
