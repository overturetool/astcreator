//TODO1: maybe generate classes with the Comparable interface 
Packages
base eu.compassresearch.ast.node;
analysis eu.compassresearch.ast.analysis;
  
Tokens
/* This section declared tokens as internal types or external classes
 * internal definitions:
 *  plus='+';
 * 
 * external
 *  location = 'java:org.overturetool.vdmj.lex.LexLocation';
 */
  LexToken = 'java:node:eu.compassresearch.ast.lex.LexToken';
  LexNameToken = 'java:node:eu.compassresearch.ast.lex.LexNameToken';
  LexIdentifierToken = 'java:node:eu.compassresearch.ast.lex.LexIdentifierToken';
  LexBooleanToken = 'java:node:eu.compassresearch.ast.lex.LexBooleanToken';
  LexCharacterToken = 'java:node:eu.compassresearch.ast.lex.LexCharacterToken';
  LexIntegerToken = 'java:node:eu.compassresearch.ast.lex.LexIntegerToken';
  LexQuoteToken = 'java:node:eu.compassresearch.ast.lex.LexQuoteToken';
  LexRealToken = 'java:node:eu.compassresearch.ast.lex.LexRealToken';
  LexStringToken = 'java:node:eu.compassresearch.ast.lex.LexStringToken';
  clonableFile ='java:eu.compassresearch.ast.util.ClonableFile';
  clonableString ='java:eu.compassresearch.ast.util.ClonableString';
  ClassDefinitionSettings = 'java:enum:eu.compassresearch.ast.typechecker.ClassDefinitionSettings';
  location = 'java:eu.compassresearch.ast.lex.LexLocation';
  nameScope = 'java:enum:eu.compassresearch.ast.typechecker.NameScope';
  
  //Java
  java_Boolean = 'java:java.lang.Boolean';
  java_Integer = 'java:java.lang.Integer';
  java_String = 'java:java.lang.String';
  java_Long = 'java:java.lang.Long';
  java_File = 'java:java.io.File';
  java_Stream = 'java:java.io.InputStream';
  
     
  static = 'static';
  async = 'async';
  
Abstract Syntax Tree
/* This section declares the AST by giving root nodes and their possible sub classes
 *
 * exp {-> package='eu.compassresearch.ast.expressions'}
 *      = {subclass1} [field_name]:field_type_must_either_be_root_or_token ...
 *      ;
 *
 */

source {->  package='eu.compassresearch.ast.program'}
      = {file} [name]: java_String (file): java_File
      | {tcpStream} [ip]: java_String [port]: java_String (stream): java_Stream 
      | {inputStream} [origin]: java_String (stream): java_Stream
      ;

/*
 Declarations 
*/
declaration {-> package='eu.compassresearch.ast.declarations'}
    // --- True declarations
    = {channelName} 
    	[singleType]: declaration.#Single.type
    | #Single
	;

#Single {-> package='eu.compassresearch.ast.declarations'}
	= {type}  
    	[identifiers]:LexIdentifierToken* 
    	(type):type
	| {expression}
    	[identifiers]:LexIdentifierToken* 
    	[expression]:exp
    ;
/*
 Definitions 
*/
definition {-> package='eu.compassresearch.ast.definitions'}
    =   {action} 
    		[declarations]:declaration.#Single.type* 
    		[action]:action
    |   {assignment} 
    		[expression]:exp 
    		(expType):type
    |   {chanset} 
    		[identifier]:LexIdentifierToken 
    		[chansetExpressions]:exp
    |   {classInvariant}  
    		[expression]:exp
    |   {equals} 
    		[pattern]:pattern 
    		[typebind]:bind.type 
    		[setbind]:bind.set 
    		[test]:exp 
            (expType):type 
            (defType):type 
            [defs]:definition*
    |   {external} 
    		(state):definition 
    		[readOnly]:java_Boolean 
    		(oldname):LexNameToken
    |   #function
    |   {inherited} 
    		(superdef):definition 
    		[oldname]:LexNameToken //is access missing here
    |   {invariant} 
    		[pattern]: pattern 
    		(expression): exp
    |   {instanceVariable} 
    		[expression]:exp 
    		(expType):type 
    		[initialized]:java_Boolean 
    		[oldname]:LexNameToken //this actually inherits assignment in Nicks tree
    |   {imported} 
    		(def):definition
    |   {local} 
    		[valueDefinition]:java_Boolean
    |   {multiBindList} 
    		(bindings):multipleBind* 
    		(defs):definition*
    |   #operation    
    |   #paragraph
    |   {process}
    		[localState]: declaration*
	     	[process]: process
    |   {renamed}  (def):definition 
    //Why does the type definition take inv pattern and expression and not just the inv definition which containts them both??
    |   {type} 
    		(invType):type.#invariant 
            [invPattern]:pattern 
            [invExpression]:exp 
            [invdef]:definition.#function.explicit 
			[infinite]:java_Boolean //is access missing here
    |   {untyped}
    |   {value} [pattern]:pattern [expression]:exp [defs]:definition* (expType):type //is access missing here
    ;
    

#paragraph {-> package='eu.compassresearch.ast.definitions'}
	  =  {class}
	   		[body]: definition*
	   		(supertypes):type* 
           	(supernames):LexNameToken*// try out () 
           	(definitions):definition* 
           	(allInheritedDefinitions):definition*
           	(localInheritedDefinitions):definition* 
           	[hasContructors]:java_Boolean
           	[settingHierarchy]:ClassDefinitionSettings
	   		(superDefs):definition.#paragraph.class*	
			[gettingInheritable]:java_Boolean
			(superInheritedDefinitions):definition*
			[gettingInvDefs]:java_Boolean
			[isAbstract]:java_Boolean
			[isUndefined]:java_Boolean
			(classtype):type
			(isTypeChecked):java_Boolean
			(invariant):definition.#operation.explicit
	   | {process} 
	     	[processDefinition]: definition.process
	   | {channel} 
	   		[channelNameDeclarations]: declaration.channelName*
	   | {chanset} 
	     	[chansets] : definition.chanset*
 	   | {action} 
 	   		[actions]: definition.action*
 	   | {types} 
 	   		[types]: definition.type*
 	   | {operation} 
 	   		[operations]:definition.#operation*
 	   | {function} 
 	   		[functionDefinitions]:definition.#function*
 	   | {value} 
 	   		[valueDefinitions]: definition*
 	   | {initial} 
 	   		[operationDefinition]: definition
 	   | {state} 
    		[fields]:field.field* 
            [invPattern]:pattern [invExpression]:exp (invdef):definition.#function.explicit
            [initPattern]:pattern [initExpression]:exp (initdef):definition.#function.explicit
            (stateDefs):definition* 
	   ;
    
#operation {-> package='eu.compassresearch.ast.definitions'}
	=   {explicit} [parameterPatterns]:pattern* 
                            [body]:action.#Statement
                            [precondition]:exp 
                            [postcondition]:exp 
                            
                            (type):type.operation
                            
                            (predef):definition.#function.explicit
                            (postdef):definition.#function.explicit
                            (paramDefinitions):definition*
                            (state):definition.#paragraph.state
                            
                            (actualResult):type
                            [isConstructor]:java_Boolean
                            
    |   {implicit} [parameterPatterns]:pair.patternListType*
                            [result]:pair.identifierType*
                            //[body]:stm
                            [externals]:clause.external*
                            [precondition]:exp 
                            [postcondition]:exp
                            [errors]:case.error*
                            
                            (type):type.operation
                            (predef):definition.#function.explicit
                            (postdef):definition.#function.explicit
                            (state):definition.#paragraph.state
                            (actualResult):type
                            (stateDefinition):definition
                            [isConstructor]:java_Boolean    
    ;
    
#function {-> package='eu.compassresearch.ast.definitions'}
    =  {explicit}  [typeParams]:LexNameToken* 
                            [paramPatternList]:pattern**
                            (type):type.function 
                            (body):exp 
                            [precondition]:exp 
                            [postcondition]:exp
                            [measure]:LexNameToken
                            
                            (predef):explicit 
                            (postdef):explicit
                            (measureDef):definition
                            (paramDefinitionList):definition*
                            
                            (recursive):java_Boolean
                            (isUndefined):java_Boolean
                            (measureLexical):java_Integer
                            
                            (expectedResult):type
                            (actualResult):type
                            
                            (isTypeInvariant):java_Boolean
                            (isCurried):java_Boolean 
                            
                            (typeInvariant):java_Boolean
                            //[poluFuncs]:???Map<TypeList, FunctionValue>
	|   {implicit}  [typeParams]:LexNameToken* 
                            [paramPatterns]:pair.patternListType*
                            [result]:pair*
                            [precondition]:exp 
                            [postcondition]:exp 
                            (predef):explicit 
                            (postdef):explicit 
                            (measureDef):definition
                            (recursive):java_Boolean
                            (isUndefined):java_Boolean 
                            (measureLexical):java_Integer
                             
                            (actualResult):type
                            (type):type.function
                            //[poluFuncs]:???Map<TypeList, FunctionValue>
	;

/*
    Expressions
*/    
exp {-> package='eu.compassresearch.ast.expressions'}
    =   {apply} [root]:exp [args]:exp* (argtypes):type* (recursive):definition /*cml*/
    |   #Unary /*cml*/
    |   #Binary /*cml*/
    |   {bracketed} [expression]:exp /*cml*/
    |   {cases} [expression]:exp [cases]:alternative.case* [others]:exp /*cml*/
    |   {elseIf} [elseIf]:exp [then]:exp  /*cml*/
    |   {exists1}  [bind]:bind [predicate]:exp [def]:definition
    |   {exists} [bindList]:multipleBind* [predicate]:exp
    |   {ioat} [bindList]:multipleBind* [predicate]:exp
    |   {field} [object]:exp [memberName]:LexNameToken [field]:LexIdentifierToken
    |   {fieldNumber} [tuple]:exp [field]:LexIntegerToken
    |   {forAll} [bindList]:multipleBind* [predicate]:exp
    |   {funcInstatiation} [function]:exp (actualTypes):type* [expdef]:definition.#function.explicit (impdef):definition.#function.implicit
    |   {history} [hop]:LexToken [opnames]:LexNameToken*
    |   {if} [test]:exp [then]:exp [elseList]:elseIf* [else]:exp /*cml*/
    |   {iota} [bind]:bind [predicate]:exp
    |   {is} [typeName]:LexNameToken (basicType):type [test]:exp [typedef]:definition
    |   {isOfBaseClass} [baseClass]:LexNameToken [exp]:exp
    |   {isOfClass} [className]:LexNameToken (classType):type.class [exp]:exp
    |   {lambda} [bindList]:bind.type* [expression]:exp [paramPatterns]:pattern* [paramDefinitions]:definition* (functionType):type.function     
    |   {letBeSt} [bind]:multipleBind [suchThat]:exp [value]:exp [def]:definition.multiBindList
    |   {letDef} [localDefs]:definition* [expression]:exp
    |   {def} [localDefs]:definition* [expression]:exp
    |   #Map
    |   {maplet}  [left]:exp [right]:exp
    |   {mkBasic} [arg]:exp
    |   {mkType} [typeName]:LexNameToken [args]:exp* (recordType):type.#invariant.record (argTypes):type*
    |   {mu} [record]:exp (recordType):type.#invariant.record [modifiers]:modifier.record* (modTypes):type*
    |   {new} [className]:LexIdentifierToken [args]:exp* (classdef):definition.#paragraph.class (ctorDefinition):definition
    |   {nil} 
    |   {notYetSpecified} 
    |   {postOp} [opname]:LexNameToken (preexpression):exp (postexpression):exp (errors):case.error* (state):definition.#paragraph.state [errorLocation]:location
    |   {pre} [function]:exp [args]:exp*
    |   {preOp} [opname]:LexNameToken (expression):exp  (errors):case.error* (state):definition.#paragraph.state
    |   {sameBaseClass} [left]:exp [right]:exp
    |   {sameClass} [left]:exp [right]:exp
    |   {self} [name]:LexNameToken
    |   #Seq
    |   #Set
    |   #literal
    |   {stateInit} (state):definition.#paragraph.state  
    |   {subclassResponsibility} 
    |   {subseq} [seq]:exp [from]:exp [to]:exp (ftype):type (ttype):type
    |   {tuple} [args]:exp* (types):type*
    |   {undefined}
    |   {variable} [name]:LexNameToken [original]:java_String (vardef):definition
    |   {name} [name]:LexNameToken        
    |   {record} [name]:LexNameToken [exprs]: exp*
    |   {tupleSelect} [tuple]:exp [entry]:java_Integer
    |   #Channel
    ;
    
#Channel  {-> package='eu.compassresearch.ast.expressions'}
	= #Rename
	| {name} [identifier]:LexNameToken [dotExpressions]:exp*
	;
	
#Rename   {-> package='eu.compassresearch.ast.expressions'}
 	= {comprehension} [renamePairs]:pair.rename [bindings]:multipleBind* [predicate]:exp
 	| {enumeration} [renamePairs]:pair.rename*
    ;
    
#literal {-> package='eu.compassresearch.ast.expressions'}
	= {string} [value]:LexStringToken
	| {quote} [value]:LexQuoteToken   
	| {char} [value]:LexCharacterToken
	| {boolean} [value]:LexBooleanToken 
	| {int} [value]:LexIntegerToken
	| {real} [value]:LexRealToken
    ; 
   
#Unary {-> package='eu.compassresearch.ast.expressions'}
    =   {absolute} 
    |   {cardinality}  
    |   {distConcat} 
    |   {distIntersect}  
    |   {distMerge} 
    |   {distUnion} 
    |   {elements}
    |   {floor}  
    |   {head} 
    |   {indices}  
    |   {len} 
    |   {mapDomain} 
    |   {mapInverse} (mapType):type.#Map
    |   {mapRange} 
    |   {not}  
    |   {powerSet} 
    |   {reverse}  
    |   {tail} 
    |   {unaryMinus}
    |   {unaryPlus}       
    ;


#Binary {-> package='eu.compassresearch.ast.expressions'}
    =   #Boolean
    |   {comp} 
    |   {domainResBy}
    |   {domainResTo}
    |   {equals}
    |   {inSet}
    |   {mapUnion}
    |   {notEqual}
    |   {notInSet}
    |   #Numeric
    |   {modify}
    |   {properSubset}
    |   {rangeResBy}
    |   {rangeResTo}
    |   {seqConcat}
    |   {setDifference}
    |   {setIntersect}
    |   {setUnion}
    |   {starStar}
    |   {subset}
    ;
    

    
#Boolean {-> package='eu.compassresearch.ast.expressions'}
    =   {and}
    |   {equivalent}
    |   {implies}
    |   {or}
    ;
    
#Numeric {-> package='eu.compassresearch.ast.expressions'}
    =   {div}
    |   {divide}
    |   {greaterEqual}
    |   {greater}
    |   {lessEqual}
    |   {less}
    |   {mod}
    |   {plus}
    |   {rem}
    |   {substract}
    |   {times}
    ;
    
#Map {-> package='eu.compassresearch.ast.expressions'}
    =   {mapComp} [first]:exp.maplet [bindings]:multipleBind* [predicate]:exp
    |   {mapEnum} [members]:exp.maplet* (domTypes):type* (rngTypes):type*
    ;
    
#Seq {-> package='eu.compassresearch.ast.expressions'}
    =   {seqComp} [first]:exp [setBind]:bind.set [predicate]:exp
    |   {seqEnum} [members]:exp* (types):type*
    ;
    
#Set {-> package='eu.compassresearch.ast.expressions'}
    =   {setComp} [first]:exp [bindings]:multipleBind* [predicate]:exp
    |   {setEnum} [members]:exp* (types):type*
    |   {setRange} [first]:exp [last]:exp (ftype):type (ltype):type
    |   #Chanset
    ;
    
#Chanset {-> package='eu.compassresearch.ast.expressions'}
	= {identifier} [identifier]:LexIdentifierToken
	| {enum} [identifiers]:LexIdentifierToken*
	| {comp} [channelNameExp]:exp.#Channel.name [bindings]:multipleBind* [predicate]:exp 
    ;
    
modifier {-> package='eu.compassresearch.ast.expressions'}
    = {record} [tag]:LexIdentifierToken [value]:exp
    ;
    
alternative {-> package='eu.compassresearch.ast.expressions'}
    = {case} [location]:location [cexp]:exp [pattern]:pattern*
             [result]:exp [defs]:definition*  (type):type (expType):type
    ;
    
/* 
	Types 
*/

type {-> package='eu.compassresearch.ast.types'}
    =   #basic
    |   {statement} // marker that a statement is typed ok
    |   {process} // marker that a process is typed ok
    |   {error} // marker that type of a subtree has failed 
    |   {processParagraph} // marker stipulating process paragraph is typed ok
    |   {chansetParagraph} // marker stipulating a chanset paragraph is typed ok
    |   {channelsParagraph} // marker stipulating a chanset paragraph is typed ok
    |   {actionParagraph} // marker stipulating that a Action Paragraph is typed ok
    |   {valueParagraph} // marker stipulating that a Values paragraph is typed ok
    |   {functionParagraph} // marker stipulating that a Function Paragraph is typed ok
    |   {typeParagraph} // marker stipulating that a Types Paragraph is typed ok
    |   {operationParagraph} // marker stipulating that a Function Paragraph is typed ok
    |   {stateParagraph} // marker stipulating that a state Paragraph is typed ok
    |   {source} // marker stipulating a source was typed ok
    |   {bracket} (type):type
    |   {channel} (type):type
    |   {class} [name]:LexNameToken (classdef):definition.#paragraph.class //change classdef to graf - is this correct dont see how it could have worked before
    |   {function} [partial]:java_Boolean (parameters):type* (result):type 
    |   #invariant
    |   #Map 
    |   {operation} (parameters):type* (result):type
    |   {optional} (type):type
    |   {parameter} [name]:LexNameToken
    |   {product} (types):type*
    |   {quote} [value]:LexQuoteToken 
    |   #seq 
    |   {set} (setof):type [empty]:java_Boolean [infinite]:java_Boolean
    |   {undefined}
    |   {union} (types):type* [infinite]:java_Boolean [expanded]:java_Boolean 
        (seqDone):java_Boolean (seqType):type.#seq 
        (setDone):java_Boolean (setType):type.set 
        (mapDone):java_Boolean (mapType):type.#Map
        (prodCard):java_Integer (prodType):type.product
        (funcDone):java_Boolean (funcType):type.function
        (opDone):java_Boolean (opType):type.operation
        (numDone):java_Boolean (numType):type.#basic.#numeric
        (recDone):java_Boolean (recType):type.#invariant.record
        (classDone):java_Boolean (classType):type.class
    |   {unknown}
    |   {unresolved} (name):LexNameToken 
    |   {voidReturn}
    |   {void} 
    ; 


#seq {-> package='eu.compassresearch.ast.types'}
    =   {seq} 
    |   {seq1} 
    ;

#Map  {-> package='eu.compassresearch.ast.types'}
    =   {inMap} 
    |   {map}
    ;
#invariant {-> package='eu.compassresearch.ast.types'}
    =   {named} (name):LexNameToken (type):type //[invdef]:explicitFunction //super = invariant type
    |   {record} [name]:LexNameToken [fields]:field.field* (infinite):java_Boolean //[invdef]:explicitFunction //super = invariant type
    ;

#basic {-> package='eu.compassresearch.ast.types'}
    =   {boolean}
    |   {char}
    |   #numeric     
    |   {token}
    ;

#numeric {-> package='eu.compassresearch.ast.types'}
    =   {int} 
    |   {natOne} 
    |   {nat} 
    |   {rational} 
    |   {real} 
    ;

field {-> package='eu.compassresearch.ast.types'}
    =   {field} [access]:specifier.access [tagname]:LexNameToken 
                [tag]:java_String (type):type [equalityAbstraction]:java_Boolean
    ;

specifier  {-> package='eu.compassresearch.ast.types'}
  = {access} [access]:access [static]:static [async]:async [location]:location 
  ;

access  {-> package='eu.compassresearch.ast.definitions'}
    =   {public}
    |   {protected}
    |   {private}
    | 	{logical} 
    ;

/* 
	Patterns 
*/

pattern {-> package='eu.compassresearch.ast.patterns'}
    =   {boolean} [value]:LexBooleanToken
    |   {character} [value]:LexCharacterToken
    |   {concatenation} [left]:pattern [right]:pattern
    |   {expression} [exp]:exp
    |   {identifier} [name]:LexNameToken
    |   {ignore} 
    |   {integer} [value]:LexIntegerToken
    |   {nil}
    |   {quote} [value]:LexQuoteToken
    |   {real} [value]:LexRealToken
    |   {record} [typename]:LexNameToken [plist]:pattern* (type):type
    |   {seq} [plist]:pattern*
    |   {set} [plist]:pattern*
    |   {string} [value]:LexStringToken
    |   {tuple} [plist]:pattern*
    |   {union} [left]:pattern [right]:pattern
    ;
    
pair {-> package='eu.compassresearch.ast.patterns'}
    = {patternType} [pattern]:pattern (type):type
    | {patternListType} [patterns]:pattern* (type):type
    | {identifierType} [identifier]:LexIdentifierToken (type):type
    | {rename} [from]:exp.#Channel.name [to]:exp.#Channel.name
    ; 
    
bind {-> package='eu.compassresearch.ast.patterns'}
    =   {set} [pattern]:pattern [set]:exp //binds
    |   {type} [pattern]:pattern (type):type //binds
    ;

//This is used in PExp and PDefinition
multipleBind {-> package='eu.compassresearch.ast.patterns'}
    =   {set}  [set]:exp //binds
    |   {type} (type):type //binds
    ;

patternBind {-> package='eu.compassresearch.ast.patterns'}
    = {def} [location]:location [pattern]:pattern [bind]:bind (defs):definition* (type):type
    ;

/* 
	Modules -- this might get kicked out 
*/

modules {-> package='eu.compassresearch.ast.modules'}
    = {module}  [name]:LexIdentifierToken 
                [imports]:imports.module
                [exports]:exports.module
                [defs]:definition*
                [files]:clonableFile*
                (importdefs):definition*
                (exportdefs):definition*
              // [delegate]:Delegate
              	[isFlat]:java_Boolean
                (typeChecked):java_Boolean
                [isDLModule]:java_Boolean //The typechecker needs to know this, since the actual exports does not exists in a DLModule
    ;


imports {-> package='eu.compassresearch.ast.modules'} 
    = {module} [name]:LexIdentifierToken [imports]:imports.fromModule* //no root
    | {fromModule} [name]:LexIdentifierToken [signatures]:import** //no root
//    | {signatures} [importList]:import*
    ;
    
import {-> package='eu.compassresearch.ast.modules'}
    =   {all}
    |   {type} [def]:definition.type
    |   #value
    ;
    
#value {-> package='eu.compassresearch.ast.modules'}
    =   {value}//since we cant instanciate #value
    |   {function} [typeParams]:LexNameToken*
    |   {operation}
    ;
    
exports {-> package='eu.compassresearch.ast.modules'}
    =   {module} [exports]:export**
    ;

export {-> package='eu.compassresearch.ast.modules'}
    =   {all}
    |   {function} [nameList]:LexNameToken* (exportType):type
    |   {operation} [nameList]:LexNameToken* (exportType):type
    |   {type} [name]:LexNameToken [struct]:java_Boolean
    |   {value} [nameList]:LexNameToken* (exportType):type
    ;

/*
	Process
*/
process {-> package='eu.compassresearch.ast.process'}
	= {state} 
		[definitionParagraphs]:definition.#paragraph* 
		[action]:action
	| {sequentialComposition} 
		[left]:process 
		[right]:process
	| {externalChoice} 
		[left]:process 
		[right]:process
	| {internalChoice} 
		[left]:process 
		[right]:process
	| {generalisedParallelism} 
		[left]:process 
		[chansetExpression]:exp 
		[right]:process
	| {alphabetisedParallelism} 
		[left]:process 
		[leftChansetExpression]:exp 
		[rightChansetExpression]:exp 
		[right]:process
	| {synchronousParallelism} 
		[left]:process 
		[right]:process
	| {interleaving} 
		[left]:process 
		[right]:process
	| {interrupt} 
		[left]:process 
		[right]:process
	| {timedInterrupt} 
		[left]:process 
		[timeExpression]:exp 
		[right]:process
	| {untimedTimeout} 
		[left]:process 
		[right]:process
	| {timeout} 
		[left]:process 
		[timeoutExpression]:exp 
		[right]:process
	| {hiding} 
		[left]:process 
		[chansetExpression]:exp
	| {startDeadline} 
		[left]:process 
		[expression]:exp
	| {endDeadline} 
		[left]:process 
		[expression]:exp
	| {instantiation} 
		[declarations]:declaration.#Single.type* 
		[processName]:LexNameToken 
		(processDefinition): definition.process 
		[args]:exp*
	| {channelRenaming} 
		[process]:process 
		[renameExpression]:exp.#Channel.#Rename
	| #Replicated
	;

#Replicated {-> package='eu.compassresearch.ast.process'}
	= {sequentialComposition}  
	| {externalChoice}
	| {internalChoice}
	| {generalisedParallelism} 
		[chansetExpression]:exp
	| {alphabetisedParallelism} 
		[chansetExpression]:exp
	| {synchronousParallelism}
	| {interleaving} 
	;	


/* 
	Actions 
*/
action {-> package='eu.compassresearch.ast.actions'}
	= {skip}
	| {stop}
	| {chaos}
	| {div}
	| {wait} 
		[expression]:exp
	| {communication} 
		[identifier]:LexIdentifierToken 
		[communicationParameters]:communicationParameter* 
		[action]:action
	| {guarded} 
		[expression]:exp 
		[action]:action
	| {sequentialComposition} 
		[left]:action 
		[right]:action
	| {externalChoice} 
		[left]:action 
		[right]:action
	| {internalChoice} 
		[left]:action 
		[right]:action
	| {interrupt} 
		[left]:action 
		[right]:action
	| {timedInterrupt} 
		[left]:action 
		[right]:action 
		[timeExpression]:exp
	| {untimedTimeout} 
		[left]:action 
		[right]:action
	| {timeout} 
		[left]:action 
		[right]:action 
		[timeoutExpression]:exp
	| {hiding} 
		[left]:action 
		[chansetExpression]:exp
	| {startDeadline} 
		[left]:action 
		[expression]:exp
	| {endDeadline} 
		[left]:action 
		[expression]:exp
	| {channelRenaming} 
		[action]:action 
		[renameExpression]:exp.#Channel.#Rename
    | {mu} 
    	[identifiers]:LexIdentifierToken* 
    	[actions]:action*
    | #Parallel
	| {parametrised} 
		[parametrisations]:parametrisation* 
		[action]:action 
	| #Instantiated
	| #Replicated
	| #Statement
	| {call} 
		[actionName]:LexNameToken
	| {subclassResponsibility}
	| {notYetSpecified} 
		[opname]:LexNameToken 
		[args]:exp*
	;
	
#Parallel {-> package='eu.compassresearch.ast.actions'}
	= {interleaving} 
	| {generalisedParallelism} 
		[chanSetExpression]:exp
	| {alphabetisedParallelism}
		[leftChanSetExpression]:exp 
		[rightChanSetExpression]:exp
	| {synchronousParallelism}
	;	

#Replicated {-> package='eu.compassresearch.ast.actions'}
	= {sequentialComposition}  
	| {externalChoice}
	| {internalChoice}
	| {interleaving} 
		[nameSetExpression]:exp
	| {generalisedParallelism} 
		[chansetExpression]:exp
		[nameSetExpression]:exp
	| {alphabetisedParallelism}
		[nameSetExpression]:exp 
		[chansetExpression]:exp
	| {synchronousParallelism}
		[nameSetExpression]:exp
	;	
	
#Instantiated {-> package='eu.compassresearch.ast.actions'}
	= {declaration} [declaration]:declaration.#Single.type* [action]:action [args]:exp*
	| {parametrised} [action]:action.parametrised  [args]:exp*
	;
	
communicationParameter {-> package='eu.compassresearch.ast.actions'}
	= {read} [parameter]:parameter [expression]:exp
	| {write} [expression]:exp 
	| {reference} [expression]:exp	
	;
	
parametrisation {-> package='eu.compassresearch.ast.actions'}
	= {val}	
	| {res} 
	| {vres} 
	;

parameter {-> package='eu.compassresearch.ast.actions'}
	= {identifier} [identifier]:LexIdentifierToken
	| {tuple} [parameters]:parameter*
	| {record}	[name]:LexNameToken [parameters]:parameter* 
	;

#Statement {-> package='eu.compassresearch.ast.actions'}
	= {let} [action]:action [localDefinitions]:definition*
	| {block} [declareStatement]:action.#Statement.declare [action]:action	
	| {nonDeterministicIf} 
		[alternatives]:nonDeterministicAlt*
	| {nonDeterministicAlt} 
		[guard]:exp 
		[action]:action
	| {if} 
		[ifExp]:exp 
		[thenStm]:action 
		[elseIf]:action.#Statement.elseIf* 
		[elseStm]:action
	| {elseIf} 
		[elseIf]:exp 
		[thenStm]:action
	| {cases} 
		[exp]:exp 
		[cases]:alternativeAction.case* 
		[others]:action
	| #GeneralAssignment
	| {call} 
		[objectDesignator]:objectDesignator 
		[name]:LexNameToken 
		[args]:exp*
	| {specification} 
		[externals]:clause.external* 
		[precondition]:exp 
		[postcondition]:exp 
	| {assignmentCall} 
		[designator]:stateDesignator 
		[call]:action.#Statement.call
	| {return} 
		[exp]:exp
	| {new} 
		[destination]:stateDesignator 
		[className]:LexNameToken 
		[args]:exp* 
		(classdef):definition.#paragraph.class 
		(ctorDefinition):definition
	| {nonDeterministicDo} 
		[alternatives]:nonDeterministicAlt*
	| {forSet} 
		[pattern]:pattern 
		[set]:exp 
		[action]:action
    | {forIndex} 
    	[var]:LexNameToken 
    	[from]:exp 
    	[to]:exp 
    	[by]:exp 
    	[action]:action
    | {forSequence} 
    	[patternBind]:patternBind.def 
    	//[reverse]:java_Boolean 
    	[exp]:exp 
    	[action]:action 
    	(seqType):type.#seq
    | {while} 
    	[condition]:exp 
    	[action]:action 
	| {declare}  [assignmentDefs]:definition*
	;

#GeneralAssignment {-> package='eu.compassresearch.ast.actions'}
    = {single} [stateDesignator]:stateDesignator [expression]:exp
    | {multiple} [assignments]:action.#Statement.#GeneralAssignment.single*
	;

stateDesignator {-> package='eu.compassresearch.ast.actions'}
    =   {field} [object]:stateDesignator [field]:LexIdentifierToken (objectfield):LexNameToken
    |   {identifier} [name]:LexNameToken
    |   {mapSeq} [mapseq]:stateDesignator [exp]:exp (mapType):type.#Map (seqType):type.#seq
    ;
    
objectDesignator {-> package='eu.compassresearch.ast.actions'}
    =   {apply} [object]:objectDesignator [args]:exp*
    |   {field} [object]:objectDesignator [className]:LexNameToken [fieldName]:LexIdentifierToken (field):LexNameToken
    |   {name} [name]:LexNameToken [expression]:exp.variable
    |   {self} [self]:LexNameToken
    ;

alternativeAction {-> package='eu.compassresearch.ast.actions'}
    = {case} [location]:location [pattern]:pattern* [result]:action (defs):definition* 
    ;

clause {-> package='eu.compassresearch.ast.actions'}
    = {external} [location]:location [mode]:mode [identifiers]:LexNameToken* (type):type
    ;

mode {-> package='eu.compassresearch.ast.actions'}
	= {read}
	| {write}
	;
    
case {-> package='eu.compassresearch.ast.actions'}
    = {error} [name]:LexIdentifierToken [left]:exp [right]:exp
    ;
    
/*
    Statements -- !!!!!!!!these are the old VDM statements and are only kept here for the moment for convenience
*/
/*
stm {-> package='eu.compassresearch.ast.statements'}
    =   {always} [always]:stm [body]:stm
    |   {assignment} [target]:stateDesignator [exp]:exp (targetType):type (expType):type 
                     (classDefinition):definition.#paragraph.class (stateDefinition):definition.state (inConstructor):java_Boolean
    |   {atomic} [assignments]:stm.assignment* (statedef):definition.state 
    |   {callObject} [designator]:objectDesignator [classname]:LexNameToken [fieldname]:LexIdentifierToken 
                     [field]:LexNameToken [args]:exp* [explicit]:java_Boolean
    |   {call} [name]:LexNameToken [args]:exp*
    |   {cases} [exp]:exp [cases]:alternativeStm.case* [others]:stm
    |   {classInvariant} [name]:LexNameToken [invDefs]:definition*
    |   {elseIf} [elseIf]:exp [thenStm]:stm
    |   {error}
    |   {exit} [expression]:exp (expType):type
    |   {forAll} [pattern]:pattern [set]:exp [statement]:stm
    |   {forIndex} [var]:LexNameToken [from]:exp [to]:exp [by]:exp [statement]:stm
    |   {forPatternBind} [patternBind]:patternBind.def [reverse]:java_Boolean [exp]:exp [statement]:stm (seqType):type.#seq
    |   {if} [ifExp]:exp [thenStm]:stm [elseIf]:stm.elseIf* [elseStm]:stm
    |   {letBeSt} [bind]:multipleBind [suchThat]:exp [statement]:stm (def):definition.multiBindList
    |   #LetDef
    |   {notYetSpecified} [opname]:LexNameToken [args]:exp*
    |   {return} [expression]:exp
    |   #SimpleBlock
    |   {specification} [externals]:clause.external* [precondition]:exp [postcondition]:exp [errors]:case.error*
    |   {start} [obj]:exp
    |   {subclassResponsibility}
    |   {trap} [patternBind]:patternBind.def [with]:stm [body]:stm
    |   {while} [exp]:exp [statement]:stm
    ; 
    
#LetDef {-> package='eu.compassresearch.ast.statements'}
    =   {def}
    ;
    
#SimpleBlock {-> package='eu.compassresearch.ast.statements'}
    =   {block} [assignmentDefs]:definition*
    |   {nonDeterministic}
    ;

alternativeStm {-> package='eu.compassresearch.ast.statements'}
    = {case} [location]:location [cexp]:exp [pattern]:pattern [result]:stm (defs):definition* (ctype):type 
    ;
    
stmtAlternative {-> package='eu.compassresearch.ast.statements'}
    = {tixe} [patternBind]:patternBind.def [statement]:stm (exp):type
    ;
*/
    
Aspect Declaration
/* This section allows fields of root types to be declared e.g. exp*/

%source = [paragraphs]: definition.#paragraph*
	;

%action =  [location]:location
	;
	
%action->#Replicated = [replicationDeclaration]:declaration.#Single* [replicatedAction]:action 
	;
	
%action->#Parallel = 	[leftAction]:action
						[leftNameSetExpression]:exp 
						[rightNameSetExpression]:exp
						[rightAction]:action
	;	

%bind = [location]:location
    ;

%communicationParameter = [location]:location
	; 


%declaration =  [location]:location [nameScope]:nameScope
	;

%definition 
    =   [location]:location 
        (name):LexIdentifierToken // Names are specialised Identifiers carrying an additional module property
        [nameScope]:nameScope 
        [used]:java_Boolean 
//      (classDefinition):definition.#paragraph.class 
//	    (declaration):declaration
        [access]:specifier.access
        (type):type 
        // [pass]:pass
    ;

%exp->#Unary =  [exp]:exp
    ;

%exp = (type):type [location]:location
    ;

%exp->#Binary = [left]:exp [op]:LexToken [right]:exp 
    ; 
    
%exp->#set 
    = (setType):type.set
    ;

%export 
    =   [location]:location [definition]:definition*
    ;

%mode = [location]:location
	;

%multipleBind = [location]:location [plist]:pattern*
    ;

%objectDesignator
    = [location]:location
    ;

%pair
    = [resolved]:java_Boolean
    ;

%pattern = [location]:location [definitions]:definition* [resolved]:java_Boolean
    ;

%parametrisation = [location]:location [declaration]:declaration.#Single.type 
	;

%process =  [location]:location 
	;

%process->#Replicated = [replicationDeclaration]:declaration.#Single* [replicatedProcess]:process 
	;

%parameter = [location]:location
	; 

%stateDesignator 
    = [location]:location (type):type
    ;

%type = [location]:location [resolved]:java_Boolean (definitions):definition*
     ; 

%type->#Map = (from):type (to):type [empty]:java_Boolean
    ;

%type->#invariant
    =   (opaque):java_Boolean
        (invDef):definition.#function.explicit
    ; 

%type->#seq
    = (seqof):type [empty]:java_Boolean
    ;

%action->#Statement = (type):type
		   ;

%import
    =   [location]:location [name]:LexNameToken [renamed]:LexNameToken [from]:modules.module
    ;  
    
%import->#value 
    = (importType):type
    ;
